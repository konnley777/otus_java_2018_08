package ru.otus.main;

import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

/**
 * Created by tully.
 * <p>
 * Many methods are not implemented.
 */
public class ConnectionDecorator implements Connection {
    private final Connection connection;

    ConnectionDecorator(Connection connection) {
        this.connection = connection;
    }

    @Override
    public Statement createStatement() throws SQLException {
        return connection.createStatement();
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return connection.prepareStatement(sql);
    }

    @Override
    public void close() throws SQLException {
        connection.close();
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return connection.getMetaData();
    }

    @Override
    public CallableStatement prepareCall(String sql)  {
        throw new RuntimeException();
    }

    @Override
    public String nativeSQL(String sql)  {
        throw new RuntimeException();
    }

    @Override
    public boolean getAutoCommit()  {
        throw new RuntimeException();
    }

    @Override
    public void setAutoCommit(boolean autoCommit)  {
        throw new RuntimeException();
    }

    @Override
    public void commit()  {
        throw new RuntimeException();
    }

    @Override
    public void rollback()  {
        throw new RuntimeException();
    }

    @Override
    public boolean isClosed()  {
        throw new RuntimeException();
    }

    @Override
    public boolean isReadOnly()  {
        throw new RuntimeException();
    }

    @Override
    public void setReadOnly(boolean readOnly)  {
        throw new RuntimeException();
    }

    @Override
    public String getCatalog()  {
        throw new RuntimeException();
    }

    @Override
    public void setCatalog(String catalog)  {
        throw new RuntimeException();
    }

    @Override
    public int getTransactionIsolation()  {
        throw new RuntimeException();
    }

    @Override
    public void setTransactionIsolation(int level)  {
        throw new RuntimeException();
    }

    @Override
    public SQLWarning getWarnings()  {
        throw new RuntimeException();
    }

    @Override
    public void clearWarnings()  {
        throw new RuntimeException();
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency)  {
        throw new RuntimeException();
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)  {
        throw new RuntimeException();
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency)  {
        throw new RuntimeException();
    }

    @Override
    public Map<String, Class<?>> getTypeMap()  {
        throw new RuntimeException();
    }

    @Override
    public void setTypeMap(Map<String, Class<?>> map)  {
        throw new RuntimeException();
    }

    @Override
    public int getHoldability()  {
        throw new RuntimeException();
    }

    @Override
    public void setHoldability(int holdability)  {
        throw new RuntimeException();
    }

    @Override
    public Savepoint setSavepoint()  {
        throw new RuntimeException();
    }

    @Override
    public Savepoint setSavepoint(String name)  {
        throw new RuntimeException();
    }

    @Override
    public void rollback(Savepoint savepoint)  {
        throw new RuntimeException();
    }

    @Override
    public void releaseSavepoint(Savepoint savepoint)  {
        throw new RuntimeException();
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)  {
        throw new RuntimeException();
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)  {
        throw new RuntimeException();
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)  {
        throw new RuntimeException();
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)  {
        throw new RuntimeException();
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)  {
        throw new RuntimeException();
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames)  {
        throw new RuntimeException();
    }

    @Override
    public Clob createClob()  {
        throw new RuntimeException();
    }

    @Override
    public Blob createBlob()  {
        throw new RuntimeException();
    }

    @Override
    public NClob createNClob()  {
        throw new RuntimeException();
    }

    @Override
    public SQLXML createSQLXML()  {
        throw new RuntimeException();
    }

    @Override
    public boolean isValid(int timeout)  {
        throw new RuntimeException();
    }

    @Override
    public void setClientInfo(String name, String value) {
        throw new RuntimeException();
    }

    @Override
    public String getClientInfo(String name)  {
        throw new RuntimeException();
    }

    @Override
    public Properties getClientInfo()  {
        throw new RuntimeException();
    }

    @Override
    public void setClientInfo(Properties properties) {
        throw new RuntimeException();
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements)  {
        throw new RuntimeException();
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes)  {
        throw new RuntimeException();
    }

    @Override
    public String getSchema()  {
        throw new RuntimeException();
    }

    @Override
    public void setSchema(String schema)  {
        throw new RuntimeException();
    }

    @Override
    public void abort(Executor executor)  {
        throw new RuntimeException();
    }

    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds)  {
        throw new RuntimeException();
    }

    @Override
    public int getNetworkTimeout()  {
        throw new RuntimeException();
    }

    @Override
    public <T> T unwrap(Class<T> iface)  {
        throw new RuntimeException();
    }

    @Override
    public boolean isWrapperFor(Class<?> iface)  {
        throw new RuntimeException();
    }
}
